// <auto-generated/>
using OneOf;
using System;
namespace Language.Analysis.CodeAnalysis.Binding;
public partial class NameExpressionOrMemberAccessExpressionSyntax
{
    public bool IsNameExpression => _oneOf.IsT0;
    public Language.Analysis.CodeAnalysis.Syntax.NameExpressionSyntax NameExpression => _oneOf.AsT0;
    public bool IsMemberAccess => _oneOf.IsT1;
    public Language.Analysis.CodeAnalysis.Syntax.MemberAccessExpressionSyntax MemberAccess => _oneOf.AsT1;

    OneOf<Language.Analysis.CodeAnalysis.Syntax.NameExpressionSyntax, Language.Analysis.CodeAnalysis.Syntax.MemberAccessExpressionSyntax> _oneOf;
    public NameExpressionOrMemberAccessExpressionSyntax(Language.Analysis.CodeAnalysis.Syntax.NameExpressionSyntax nameExpression)
    {
        _oneOf = nameExpression;
    }
    public NameExpressionOrMemberAccessExpressionSyntax(Language.Analysis.CodeAnalysis.Syntax.MemberAccessExpressionSyntax memberAccess)
    {
        _oneOf = memberAccess;
    }

public static implicit operator NameExpressionOrMemberAccessExpressionSyntax(OneOf<Language.Analysis.CodeAnalysis.Syntax.NameExpressionSyntax, Language.Analysis.CodeAnalysis.Syntax.MemberAccessExpressionSyntax> other){if (other.IsT0){ return new NameExpressionOrMemberAccessExpressionSyntax(other.AsT0);}if (other.IsT1){ return new NameExpressionOrMemberAccessExpressionSyntax(other.AsT1);}throw new Exception();}
public static implicit operator OneOf<Language.Analysis.CodeAnalysis.Syntax.NameExpressionSyntax, Language.Analysis.CodeAnalysis.Syntax.MemberAccessExpressionSyntax>(NameExpressionOrMemberAccessExpressionSyntax @this){    return @this._oneOf;}

    public static implicit operator NameExpressionOrMemberAccessExpressionSyntax(Language.Analysis.CodeAnalysis.Syntax.NameExpressionSyntax nameExpression) => new NameExpressionOrMemberAccessExpressionSyntax(nameExpression);
    public static implicit operator NameExpressionOrMemberAccessExpressionSyntax(Language.Analysis.CodeAnalysis.Syntax.MemberAccessExpressionSyntax memberAccess) => new NameExpressionOrMemberAccessExpressionSyntax(memberAccess);
}